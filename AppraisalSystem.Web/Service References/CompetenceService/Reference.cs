//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppraisalSystem.Web.CompetenceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Competence", Namespace="http://schemas.datacontract.org/2004/07/DB")]
    [System.SerializableAttribute()]
    public partial class Competence : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompetenceDto", Namespace="http://schemas.datacontract.org/2004/07/Interfaces.DTO.Response")]
    [System.SerializableAttribute()]
    public partial class CompetenceDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionsCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionsCount {
            get {
                return this.QuestionsCountField;
            }
            set {
                if ((this.QuestionsCountField.Equals(value) != true)) {
                    this.QuestionsCountField = value;
                    this.RaisePropertyChanged("QuestionsCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CompetenceService.ICompetenceWcfService")]
    public interface ICompetenceWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByName", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByNameResponse")]
        string[] GetAllCompetencesByName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByName", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByNameResponse")]
        System.Threading.Tasks.Task<string[]> GetAllCompetencesByNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetences", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesResponse")]
        AppraisalSystem.Web.CompetenceService.Competence[] GetAllCompetences();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetences", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesResponse")]
        System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.Competence[]> GetAllCompetencesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetenceByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetenceByPositionResponse")]
        AppraisalSystem.Web.CompetenceService.Competence[] GetAllCompetenceByPosition(string positionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetenceByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetenceByPositionResponse")]
        System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.Competence[]> GetAllCompetenceByPositionAsync(string positionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/AddCompetence", ReplyAction="http://tempuri.org/ICompetenceWcfService/AddCompetenceResponse")]
        void AddCompetence(string competenceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/AddCompetence", ReplyAction="http://tempuri.org/ICompetenceWcfService/AddCompetenceResponse")]
        System.Threading.Tasks.Task AddCompetenceAsync(string competenceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/UpdateCompetence", ReplyAction="http://tempuri.org/ICompetenceWcfService/UpdateCompetenceResponse")]
        void UpdateCompetence(int id, string competenceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/UpdateCompetence", ReplyAction="http://tempuri.org/ICompetenceWcfService/UpdateCompetenceResponse")]
        System.Threading.Tasks.Task UpdateCompetenceAsync(int id, string competenceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesNameByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesNameByPositionResponse")]
        string[] GetAllCompetencesNameByPosition(string positionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesNameByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesNameByPositionResponse")]
        System.Threading.Tasks.Task<string[]> GetAllCompetencesNameByPositionAsync(string positionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByPositionResponse")]
        AppraisalSystem.Web.CompetenceService.CompetenceDto[] GetAllCompetencesByPosition(int positionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByPosition", ReplyAction="http://tempuri.org/ICompetenceWcfService/GetAllCompetencesByPositionResponse")]
        System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.CompetenceDto[]> GetAllCompetencesByPositionAsync(int positionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompetenceWcfServiceChannel : AppraisalSystem.Web.CompetenceService.ICompetenceWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompetenceWcfServiceClient : System.ServiceModel.ClientBase<AppraisalSystem.Web.CompetenceService.ICompetenceWcfService>, AppraisalSystem.Web.CompetenceService.ICompetenceWcfService {
        
        public CompetenceWcfServiceClient() {
        }
        
        public CompetenceWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompetenceWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompetenceWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompetenceWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAllCompetencesByName() {
            return base.Channel.GetAllCompetencesByName();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllCompetencesByNameAsync() {
            return base.Channel.GetAllCompetencesByNameAsync();
        }
        
        public AppraisalSystem.Web.CompetenceService.Competence[] GetAllCompetences() {
            return base.Channel.GetAllCompetences();
        }
        
        public System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.Competence[]> GetAllCompetencesAsync() {
            return base.Channel.GetAllCompetencesAsync();
        }
        
        public AppraisalSystem.Web.CompetenceService.Competence[] GetAllCompetenceByPosition(string positionName) {
            return base.Channel.GetAllCompetenceByPosition(positionName);
        }
        
        public System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.Competence[]> GetAllCompetenceByPositionAsync(string positionName) {
            return base.Channel.GetAllCompetenceByPositionAsync(positionName);
        }
        
        public void AddCompetence(string competenceName) {
            base.Channel.AddCompetence(competenceName);
        }
        
        public System.Threading.Tasks.Task AddCompetenceAsync(string competenceName) {
            return base.Channel.AddCompetenceAsync(competenceName);
        }
        
        public void UpdateCompetence(int id, string competenceName) {
            base.Channel.UpdateCompetence(id, competenceName);
        }
        
        public System.Threading.Tasks.Task UpdateCompetenceAsync(int id, string competenceName) {
            return base.Channel.UpdateCompetenceAsync(id, competenceName);
        }
        
        public string[] GetAllCompetencesNameByPosition(string positionName) {
            return base.Channel.GetAllCompetencesNameByPosition(positionName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllCompetencesNameByPositionAsync(string positionName) {
            return base.Channel.GetAllCompetencesNameByPositionAsync(positionName);
        }
        
        public AppraisalSystem.Web.CompetenceService.CompetenceDto[] GetAllCompetencesByPosition(int positionId) {
            return base.Channel.GetAllCompetencesByPosition(positionId);
        }
        
        public System.Threading.Tasks.Task<AppraisalSystem.Web.CompetenceService.CompetenceDto[]> GetAllCompetencesByPositionAsync(int positionId) {
            return base.Channel.GetAllCompetencesByPositionAsync(positionId);
        }
    }
}
