//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppraisalSystem.Web.AccountService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DB")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleId {
            get {
                return this.RoleIdField;
            }
            set {
                if ((this.RoleIdField.Equals(value) != true)) {
                    this.RoleIdField = value;
                    this.RaisePropertyChanged("RoleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IAccountWcfService")]
    public interface IAccountWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/ValidateUser", ReplyAction="http://tempuri.org/IAccountWcfService/ValidateUserResponse")]
        bool ValidateUser(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/ValidateUser", ReplyAction="http://tempuri.org/IAccountWcfService/ValidateUserResponse")]
        System.Threading.Tasks.Task<bool> ValidateUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/CreateUser", ReplyAction="http://tempuri.org/IAccountWcfService/CreateUserResponse")]
        void CreateUser(string firstName, string lastName, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/CreateUser", ReplyAction="http://tempuri.org/IAccountWcfService/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(string firstName, string lastName, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/SearchUserByUserName", ReplyAction="http://tempuri.org/IAccountWcfService/SearchUserByUserNameResponse")]
        AppraisalSystem.Web.AccountService.User SearchUserByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/SearchUserByUserName", ReplyAction="http://tempuri.org/IAccountWcfService/SearchUserByUserNameResponse")]
        System.Threading.Tasks.Task<AppraisalSystem.Web.AccountService.User> SearchUserByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/GetRolesForUser", ReplyAction="http://tempuri.org/IAccountWcfService/GetRolesForUserResponse")]
        string[] GetRolesForUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountWcfService/GetRolesForUser", ReplyAction="http://tempuri.org/IAccountWcfService/GetRolesForUserResponse")]
        System.Threading.Tasks.Task<string[]> GetRolesForUserAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountWcfServiceChannel : AppraisalSystem.Web.AccountService.IAccountWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountWcfServiceClient : System.ServiceModel.ClientBase<AppraisalSystem.Web.AccountService.IAccountWcfService>, AppraisalSystem.Web.AccountService.IAccountWcfService {
        
        public AccountWcfServiceClient() {
        }
        
        public AccountWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ValidateUser(string email, string password) {
            return base.Channel.ValidateUser(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUserAsync(string email, string password) {
            return base.Channel.ValidateUserAsync(email, password);
        }
        
        public void CreateUser(string firstName, string lastName, string password, string email) {
            base.Channel.CreateUser(firstName, lastName, password, email);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(string firstName, string lastName, string password, string email) {
            return base.Channel.CreateUserAsync(firstName, lastName, password, email);
        }
        
        public AppraisalSystem.Web.AccountService.User SearchUserByUserName(string userName) {
            return base.Channel.SearchUserByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<AppraisalSystem.Web.AccountService.User> SearchUserByUserNameAsync(string userName) {
            return base.Channel.SearchUserByUserNameAsync(userName);
        }
        
        public string[] GetRolesForUser(string userName) {
            return base.Channel.GetRolesForUser(userName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRolesForUserAsync(string userName) {
            return base.Channel.GetRolesForUserAsync(userName);
        }
    }
}
